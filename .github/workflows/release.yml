name: CD

on:
  push:
    branches: ["master"]
    # See docs at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-excluding-paths
    paths-ignore:
      - '.husky/**'
      - '**.md'
      
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # Image name MUST have a pattern like <org_name_lowercase>/<repo_name_lowercase>
  IMAGE_NAME: ticklabvn/tickapp-fe
  # username login to ghcr MUST be organization's name in lower case
  ORG_USERNAME: ${{ github.actor }}
  
permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    # Temporarily disable release step
    if: false 
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          pull-request-header: "Bot (:robot:) requested to create a new release on ${{ github.ref_name }}"
          commit-search-depth: 20
  # build:
  #   name: Build
  #   needs: [release]
  #   if: ${{ needs.release.outputs.build == 'true' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       name: Checkout repository

  #     - name: Setup Docker buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log into registry ${{ env.REGISTRY }}
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ env.ORG_USERNAME }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.tag_name }}
  # deploy:
  #   name: Deploy
  #   if: false # Temporarily disable deploy step
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.VPS_HOST }}
  #         port: ${{ secrets.VPS_PORT }}
  #         username: ${{ secrets.VPS_USERNAME }}
  #         password: ${{ secrets.VPS_PASSWORD }}

  #         script: |
  #           export CR_PAT=${{ secrets.GITHUB_TOKEN }}
  #           echo $CR_PAT | docker login ${{ env.REGISTRY }} -u ${{ env.ORG_USERNAME }} --password-stdin
  #           docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  #           docker rm -f sensor_manager_ui
  #           docker run --name sensor_manager_ui -p 3000:3000 --restart always -d ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  #           docker logout ${{ env.REGISTRY }}
            
